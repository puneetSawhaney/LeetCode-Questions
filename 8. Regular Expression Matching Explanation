Approach:

The code uses a 2D boolean array `dp` to store the results of subproblems. The cell `dp[i][j]` represents whether the first `i` characters of the string `s` match the first `j` characters of the pattern `p`. The algorithm fills this array iteratively by considering various cases.

Algorithm:

1. **Initialization:**
   - The array `dp` is initialized with dimensions `(s.length() + 1) x (p.length() + 1)`.
   - The variable `mr` is set to the number of rows in `dp`, and `mc` is set to the number of columns.

2. **Base Cases:**
   - The loop initializes the array based on the following conditions:
     - If both strings are empty (`i == 0` and `j == 0`), set `dp[i][j]` to `true`.
     - If the string is empty (`i == 0`), handle the pattern characters, including '*' cases.
     - If the pattern is empty (`j == 0`), set `dp[i][j]` to `false` as there is no match.

3. **Main Loop:**
   - The loop iterates through each cell of the `dp` array, excluding the base cases.
   - It considers three cases based on the current characters in the pattern (`chp`) and the string (`chs`):
     - If `chp` is '*', handle the '*' character and update the array accordingly.
     - If `chp` is '.', handle it as a wildcard character.
     - If `chp` matches `chs`, set `dp[i][j]` based on the previous matching status.

4. **Final Result:**
   - The final result is stored in `dp[mr][mc]`, indicating whether the entire string `s` matches the entire pattern `p`.

### Explanation:

- The algorithm builds a matrix of subproblem solutions to efficiently determine if the entire string matches the pattern.
- It accounts for '*' as a special character that can match zero or more occurrences of the preceding element.
- It handles '.' as a wildcard character that matches any single character.
- The solution is based on the principles of dynamic programming, breaking down the problem into smaller overlapping subproblems.

In summary, my code leverages dynamic programming to efficiently solve the regular expression matching problem by considering various cases and updating the `dp` array based on the relationships between characters in the string and pattern.
